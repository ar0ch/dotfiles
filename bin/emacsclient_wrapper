#!/bin/sh -e

RETRY_TIMES=30
RETRY_INTERVAL=0.5 # sec

server_name=''

main() {
    server_name="$(get_server_name)"

    if [ -z "$server_name" ]
    then abort "cannot generate a server name"
    fi

    echo "Server Name: ${server_name}"

    if ! is_running
    then
        echo "Not found by the server name"
        echo "Create a new emacs server"

        if ! start_server
        then abort "timeout for emacs-server start"
        fi
    fi

    emacsclient --socket-name "${server_name}" "$@"

    switch_to_server
}

get_server_name() {
    if [ -n "$DISPLAY" ]; then echo "${USER}-wm-${DISPLAY}"
    elif [ -n "$STY" ];   then echo "${USER}-sty-${STY}"
    fi
}

is_running() {
    pid=$(emacsclient --socket-name "${server_name}" --eval "(emacs-pid)" \
        2>/dev/null)
    [ -n "${pid}" ]
}

start_server() {
    el="$el --eval '(setq server-name \"${server_name}\")'"
    el="$el --eval '(server-start)'"
    if [ -n "$DISPLAY" ]
    then eval nohup emacs $el >/dev/null 2>&1
    elif [ -n "$STY" ]
    then eval screen emacs $el
    fi

    c=$RETRY_TIMES
    while [ $c -ne 0 ] && ! is_running
    do
        echo_spinning_bar $c  >&2
        sleep $RETRY_INTERVAL
        c=$((c-1))
    done

    [ $c -ne 0 ]
}

echo_spinning_bar() {
    case $(($1%4)) in
        0) echo -n "-\r";;
        1) echo -n "\\\\\r";;
        2) echo -n "|\r";;
        3) echo -n "/\r";;
    esac
}

switch_to_server() {
    if [ -n "$DISPLAY" ]
    then : # no-op
    elif [ -n "$STY" ]
    then
        w=$(emacsclient \
            --socket-name "${server_name}" \
            --eval "(getenv \"WINDOW\")" 2>/dev/null | \
            tr -d '"')
        if [ -n "$w" ]
        then screen -X select $w
        fi
    fi
}

abort() {
    echo "ERROR:" "$@" >&2
    exit 1
}

main "$@"
