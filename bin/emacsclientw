#!/usr/bin/python

RETRY_NUMBER = 30
RETRY_INTERVAL = 0.5 # sec

##

import os, sys, subprocess, time, itertools, re, optparse

PROG = os.path.basename(sys.argv[0])
USAGE = """
Usage: {prog} [OPTIONS] FILE...
       {prog} --print-server-name
An emacsclient wrapper which invoke emacs-server automatically
and name the server after the current environments to avoid the `server-name` conflicts.
All unknown arguments/options will be passed to emacsclient.
"""[1:][:-1].format(prog=PROG)

DEVNULL = open(os.devnull, 'wb')

def main():
    get_command().run()

def get_command():
    p = PassThroughOptionParser(add_help_option=False)
    p.set_usage(USAGE)
    p.set_defaults(command=Command.EMACSCLIENT_INVOKER)
    p.add_option("-h", "--help",
                 help="Show this help message and exit.",
                 action="help")
    p.add_option("-H", "--emacsclient-help",
                 help="Show `emacslient --help`.",
                 action="store_const",
                 dest="command",
                 const=Command.EMACSCLIENT_HELP_PRINTER)
    p.add_option("--print-server-name",
                 help="Print the server name after the current environments. "+
                 "Does not invoke emacsclient.",
                 action="store_const",
                 dest="command",
                 const=Command.SERVER_NAME_PRINTER)
    opts, args = p.parse_args()
    return opts.command()

def get_server():
    svrs = [XEmacsServer, ScreenEmacsServer]
    itr = itertools.ifilter(lambda s:s.is_runnable(), svrs)
    svr = next(itr, None)
    if svr is None:
        abort("cannot generate the socket-name. "
              "require DISPLAY or STY environment variable.")
    return svr()

def abort(msg):
    sys.exit("Abort: " + msg)

def err(s):
    sys.stderr.write(s + "\n")

def invoke_emacsclient(server_name):
    cmd = ["emacsclient", "--socket-name", server_name] + sys.argv[1:]
    err("Invoke: %s" % pp_string_as_cmd(cmd))
    return subprocess.Popen(cmd)

def pp_string_as_cmd(cmd):
    return ' '.join(map(convert_as_arg, cmd))

def convert_as_arg(arg):
    if re.search(r'[\s?!&]', arg, 1):
        return '"%s"' % re.sub(r'"', '\\"', arg)
    else:
        return arg

## commands

class ServerNamePrinter:
    def run(self):
        server = get_server()
        print(server.name)

class EmacsclientInvoker:
    def run(self):
        server = get_server()
        if not server.is_running():
            server.start()
        e = invoke_emacsclient(server.name)
        server.focus()
        e.wait()

class EmacsclientHelpPrinter:
    def run(self):
        subprocess.call(["emacsclient", "--help"])

class Command:
    SERVER_NAME_PRINTER = ServerNamePrinter
    EMACSCLIENT_INVOKER = EmacsclientInvoker
    EMACSCLIENT_HELP_PRINTER = EmacsclientHelpPrinter

## emacs-servers
# TODO: tmux support

class EmacsServer:
    """super class for emacs server"""
    def is_running(self):
        s = subprocess.call(["emacsclient",
                             "--socket-name", self.name,
                             "--eval", "(emacs-pid)"],
                            stderr=DEVNULL, stdout=DEVNULL)
        return s == 0

    def start(self):
        cmd = [
            "emacs",
            "--eval", "(setq server-name \"%s\")" % self.name,
            "--eval", "(server-start)"
        ]
        self._start(cmd)
        self.__wait()

    def focus(self):
        pass

    def __wait(self):
        c = 0
        while c < RETRY_NUMBER and (not self.is_running()):
            c += 1
            time.sleep(RETRY_INTERVAL)
            sys.stdout.write("%d\r" % c)
            sys.stdout.flush()

        if c == RETRY_NUMBER:
            raise RetryLimitExceededException()

class RetryLimitExceededException(BaseException):
    pass

class XEmacsServer(EmacsServer):
    """emacs-server for X Window System"""
    def __init__(self):
        self.name = "wm-" + os.getenv("DISPLAY")

    def _start(self, emacs_cmd):
        cmd = " ".join(["'%s'" % e for e in emacs_cmd]) + " >/dev/null 2>&1 &"
        subprocess.check_call(["sh", "-c", cmd])

    @staticmethod
    def is_runnable():
        return bool(os.getenv("DISPLAY"))

class ScreenEmacsServer(EmacsServer):
    """emacs-server for GNU screen"""
    def __init__(self):
        self.name = "sty-" + os.getenv("STY")

    def _start(self, emcas_cmd):
        subprocess.check_call(["screen"] + emcas_cmd)

    def focus(self):
        o = subprocess.check_output(["emacsclient",
                                     "--socket-name", self.name,
                                     "--eval", "(getenv \"WINDOW\")"])
        wid = o.replace('"', "")
        if len(wid) == 0:
            return

        subprocess.check_call(["screen", "-X", "select", str(wid)])

    @staticmethod
    def is_runnable():
        return bool(os.getenv("STY"))

##

# http://stackoverflow.com/questions/1885161/how-can-i-get-optparses-optionparser-to-ignore-invalid-options
class PassThroughOptionParser(optparse.OptionParser):
    """
    An unknown option pass-through implementation of OptionParser.

    When unknown arguments are encountered, bundle with largs and try again,
    until rargs is depleted.

    sys.exit(status) will still be called if a known argument is passed
    incorrectly (e.g. missing arguments or bad argument types, etc.)
    """
    def _process_args(self, largs, rargs, values):
        while rargs:
            try:
                optparse.OptionParser._process_args(self,largs,rargs,values)
            except (optparse.BadOptionError, optparse.AmbiguousOptionError), e:
                largs.append(e.opt_str)

if __name__ == "__main__":
    main()
