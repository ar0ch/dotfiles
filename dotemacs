;;;; -*- mode: lisp-interaction; syntax: elisp; coding: utf-8-unix -*-

;;ライブラリパスを追加
(add-to-list 'load-path "~/.emacs.d")

;; 日本語設定 (UTF-8)
(set-language-environment "Japanese")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

;; リセットされた場合に UTF-8 に戻す
;; http://0xcc.net/blog/archives/000041.html
(set-default-coding-systems 'utf-8)

;; meadow で使うときの日本語周り
; (if (string-equal system-type "windows-nt")    (let ()  ))

;; 自動保存機能
(setq auto-save-default t
      auto-save-list-file-name "~/.emacs-auto-save-list" ;; 自動保存に関する情報
      auto-save-interval 50  ;; 自動保存する打鍵回数
      auto-save-timeout 10)  ;; 自動保存する時間

;; emacs 終了時に確認
; (setq confirm-kill-emacs 'yes-or-no-p)

;; マウス操作を有効に
;(xterm-mouse-mode t)
;(mouse-wheel-mode t)

;; フォントロックモード (強調表示等) を有効にする
(global-font-lock-mode t)

;; マークしている範囲をハイライトする
(setq-default transient-mark-mode t)

;; C-x C-u が何もしないように変更する (undo の typo 時誤動作防止)
(global-unset-key "\C-x\C-u")

;; 括弧の対応をハイライト.
(show-paren-mode 1)
(setq show-paren-style 'mixed)

;; 対応するカッコの face
(set-face-attribute 'show-paren-match-face nil
                    :foreground nil
                    :background "#333333"
                    :bold t)

;; 対応するカッコが無い時の face
(set-face-attribute 'show-paren-mismatch-face nil
                    ;:foreground "white"
                    ;:background "#666666"
                    :bold t)

;; バッファ末尾に余計な改行コードを防ぐための設定
(setq next-line-add-newlines nil)

;; 縦分割の時、一行で表示しきれない時の挙動
;;   nil: 改行
;;   t:   はみ出し？
(setq truncate-partial-width-windows nil)

;; C-x l で goto-line を実行
(define-key ctl-x-map "l" 'goto-line)

;; インデントの際にタブを用いるか否か
(setq-default indent-tabs-mode nil)

;; 時間を表示
;; (display-time)

;; メニューバーを消す
(menu-bar-mode (if window-system 1 0))

;; "Symbolic link to Git-controlled source file;" みたいに聞かれるの回避
(setq vc-follow-symlinks t)

;; ウィンドウシステムを使っているとき
(if window-system
    (let ()

      ;; (add-to-list 'default-frame-alist '(foreground-color . "white"))
      ;; (add-to-list 'default-frame-alist
      ;;             '(border-color . "cyan"));;

      (add-to-list 'default-frame-alist '(cursor-color . "green"))

      ;; ツールバーを消す
      (tool-bar-mode nil)

      ;; スクロールバーを消す(nil:消える,right:右側)
      (set-scroll-bar-mode "right")

      ;; welcome to emacs ... を消す
      (setq inhibit-splash-screen t)

      ;; (add-to-list 'default-frame-alist '(font . "-unknown-Takaoゴシック-normal-normal-normal-*-19-*-*-*-d-0-iso10646-1"))

      ))

;; 列数表示
(column-number-mode 1)

;; C-o に動的略語展開機能を割り当てる
;; (define-key global-map "\C-o" 'dabbrev-expand)
;; (setq dabbrev-case-fold-search nil) ; 大文字小文字を区別

;; 日本語・英語混じり文での区切判定
;; http://www.alles.or.jp/~torutk/oojava/meadow/Meadow210Install.html
(defadvice dabbrev-expand
  (around modify-regexp-for-japanese activate compile)
  "Modify `dabbrev-abbrev-char-regexp' dynamically for Japanese words."
  (if (bobp)
      ad-do-it
    (let ((dabbrev-abbrev-char-regexp
           (let ((c (char-category-set (char-before))))
             (cond
              ((aref c ?a) "[-_A-Za-z0-9]") ; ASCII
              ((aref c ?j) ; Japanese
               (cond
                ((aref c ?K) "\\cK") ; katakana
                ((aref c ?A) "\\cA") ; 2byte alphanumeric
                ((aref c ?H) "\\cH") ; hiragana
                ((aref c ?C) "\\cC") ; kanji
                (t "\\cj")))
              ((aref c ?k) "\\ck") ; hankaku-kana
              ((aref c ?r) "\\cr") ; Japanese roman ?
              (t dabbrev-abbrev-char-regexp)))))
      ad-do-it)))

;; BS で選択範囲を消す
(delete-selection-mode 1)

;; "The local variables list in .emacs" と言われるのを抑止
(add-to-list 'ignored-local-variables 'syntax)

;; 基本的な色
(setq default-frame-alist
      (append
       '(
         ;; (corsor-type . bar)
         (corsor-color . "green")
         (foreground-color . "white")
         (background-color . "#000000")
         )
       default-frame-alist))

;; 現在の行をハイライト
(global-hl-line-mode)
(set-face-attribute 'hl-line nil
                    :background "#000022"
                    :foreground nil)

;; セーブ時の挙動
(add-hook 'before-save-hook
          '(lambda ()
             ;; 末尾空白の削除
             (delete-trailing-whitespace)
             ;; (replace-regexp "[	 ]+$" "" nil (point-min) (point-max))
             ))

;; -------------------------------------------------------------------------
;; キーバインド変更
;; C-h でカーソルの左にある文字を消す
(global-set-key "\C-h" 'delete-backward-char)

;; C-h に割り当てられている関数 help-command を C-x C-h に割り当てる
(global-set-key "\C-x\C-h" 'help-command)

;; C-; でコメントトグル
;; TODO mark-active の状態で、リージョン/現在の行をコメントアウトするのか切り替え
;; (global-set-key (kbd "C-u") 'kui/comment-out)

;; tag のキーバインド変更
(global-set-key "\M-t" nil)
(global-set-key "\M-tt" 'find-tag)
(global-set-key "\M-t\M-t" 'find-tag)
(global-set-key "\M-tn" 'next-tag)
(global-set-key "\M-tp" 'pop-tag-mark)

;; -------------------------------------------------------------------------
;; 自作関数

;; インデント先頭に移動
;; インデント先頭時は行頭移動
;; 行頭時は何もしない （要するに eclipse 風）
(defun kui/move-beginning-of-line ()
  "back-to-indentation but move-beginning-of-line if point is in indentation
or nothing if point is in BoL"
  (interactive)
  (unless (= (point) (point-at-bol))
    (set 'old-point (point))
    (back-to-indentation)
    (if (= old-point (point))
        (move-beginning-of-line nil)))
  )
(global-set-key "\C-a" 'kui/move-beginning-of-line)

;; require の代わりに使う
(defun autoload-if-exist (function file &optional docstring interactive type)
  "autoload if FILE exist"
  (if (locate-library file)
      (let () (autoload function file docstring interactive type) t)
    ))

;; emacs 用マジックコメント挿入
(defun insert-magic-comment ()
  "insert magic comment with current coding & major-mode into current line."
  (interactive)
  (if (or buffer-file-coding-system major-mode)
      (insert
       (concat "-*- "
               (if buffer-file-coding-system
                   (concat "coding:"
                           (symbol-name buffer-file-coding-system)
                           "; "))
               (if major-mode
                   (concat "mode:"
                           (replace-regexp-in-string "-mode\\'" ""
                                                     (symbol-name major-mode))
                           "; "))
               "-*-\n"))
    (message "Both current coding and major-mode are nil.")))

;; -------------------------------------------------------------------------
;; 便利な感じのマイナーモード

;; auto-complete-mode
;; http://cx4a.org/software/auto-complete/index.ja.html
;; (define-key ac-complete-mode-map "\M-/" 'ac-stop)
(when (require 'auto-complete-config nil t)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
  (ac-config-default)

  ;; ac-modes に登録されてるメジャーモード時に ac 発動
  (global-auto-complete-mode t)

  ;; *候補間を移動
  (define-key ac-complete-mode-map "\C-n" 'ac-next)
  (define-key ac-complete-mode-map "\C-p" 'ac-previous)

  ;; *補完停止
  (define-key ac-complete-mode-map "\C-[" 'ac-stop)

  ;; *補完する
  ;; (define-key ac-complete-mode-map "\C-i" 'auto-complete)

  ;; *大文字・小文字の区別
  ;; nil:        区別しない
  ;; t:  区別する
  ;; 'smart: 補完対象に大文字が含まれる場合のみ区別する
  (setq ac-ignore-case 'smart)

  ;; 直ちに補完メニューを表示する
  ;; (ac-show-menu-immediately-on-auto-complete t)
  )

;; rsense
(setq rsense-home "~/.emacs.d/src/rsense-0.3")
(add-to-list 'load-path (concat rsense-home "/etc"))
(require 'rsense nil t)

;; tabbar-mode
(when (require 'tabbar nil t)

  ;; タブの間に挟む文字
  (setq tabbar-separator-value " ")

  ;; tabbar のタブのグループの仕方
  ;;   デフォルト: 一部を除き major-mode ごとにタブをグループ化
  ;;   下: 全部同じグループに
  ;;       (http://www.emacswiki.org/emacs/TabBarMode)
  (setq tabbar-buffer-groups-function (lambda () (list "Buffers")))

  (when (require 'cl nil t) ;; remove-if とかに必要

    ;; 表示するタブのフィルタリング
    ;;   * で始まるバッファはタブに表示しない
    (setq tabbar-buffer-list-function
          (lambda ()
            (remove-if
             (lambda (b)
               (and (string-match "^ ?\\*" (buffer-name b))
                    (not (string-equal (buffer-name (current-buffer))
                                       (buffer-name b)))))
             (buffer-list)))))

  ;; faces
  (set-face-attribute 'tabbar-default nil
                      :background "white" ;;"#333333"
                      :foreground "black" ;; "#000000"
                      :underline t
                      :box nil)
  (set-face-attribute 'tabbar-selected nil
                      :background "black"
                      :foreground "white"
                      :underline nil
                      :box nil)
  (set-face-attribute 'tabbar-unselected nil
                      :background nil ;;"#333333"
                      :foreground nil ;; "#cccccc"
                      :underline t
                      :box nil)
  (set-face-attribute 'tabbar-separator nil
                      :background nil
                      )
  ;; 左に表示されるボタンを消す
  (dolist (button '(tabbar-buffer-home-button
                    tabbar-scroll-left-button
                    tabbar-scroll-right-button))
    (set button (cons (cons "" nil) (cons "" nil))))

  ;; Ctrl+Tab でタブ切り替え
  (global-set-key "\M-[1;5i" 'tabbar-forward)  ;; for mintty
  (global-set-key "\M-[1;6i" 'tabbar-backward) ;; for mintty
  (global-set-key [(control tab)] 'tabbar-forward)
  (global-set-key [(control shift tab)] 'tabbar-backward)
  (global-set-key "\C-xn" 'tabbar-forward)
  (global-set-key "\C-xp" 'tabbar-backward)


  (tabbar-mode))

;; flymake 使うとき
(defvar flymake-display-err-delay 1
  "delay to display flymake error message ")
(defvar flymake-display-err-timer nil
  "timer for flymake-display-err-menu-for-current-line")
(defvar flymake-display-err-before-line nil)
(defvar flymake-display-err-before-colmun nil)

(eval-after-load "flymake"
  '(when (require 'popup nil t)

     ;; flymake 現在行のエラーをpopup.elのツールチップで表示する
     ;; https://gist.github.com/292827
     (defun flymake-display-err-menu-for-current-line ()
       (interactive)
       (let* ((line-no (flymake-current-line-no))
              (line-err-info-list (nth 0 (flymake-find-err-info flymake-err-info
                                                                line-no))))
         (when (and (flymake-display-err-check-moved line-no (current-column))
                    line-err-info-list)
           (setq flymake-display-err-before-line-no line-no)
           (let* ((count (length line-err-info-list))
                  (menu-item-text nil))
             (while (> count 0)
               (setq menu-item-text
                     (flymake-ler-text (nth (1- count) line-err-info-list)))
               (let* ((file (flymake-ler-file (nth (1- count) line-err-info-list)))
                      (line (flymake-ler-line (nth (1- count) line-err-info-list))))
                 (if file
                     (setq menu-item-text
                           (concat menu-item-text " - " file "(" (format "%d" line) ")"))))
               (setq count (1- count))
               (if (> count 0) (setq menu-item-text (concat menu-item-text "\n")))
               )
             (popup-tip menu-item-text)))))

     (defun flymake-display-err-check-moved (cur-line cur-col)
       (let* ((is-not-moved (and flymake-display-err-before-line
                                 flymake-display-err-before-colmun
                                 (= cur-line flymake-display-err-before-line)
                                 (= cur-col flymake-display-err-before-colmun))))
         ;; (message (concat "line:" cur-line ", col:" cur-col))
         (setq flymake-display-err-before-line cur-line
               flymake-display-err-before-colmun cur-col)
         (not is-not-moved)))

     (global-set-key "\M-e"
                     '(lambda ()
                        (interactive)
                        (let ()
                          (message "next error")
                          (flymake-goto-next-error)
                          (flymake-display-err-menu-for-current-line))))
     (global-set-key "\M-E"
                     '(lambda ()
                        (interactive)
                        (let ()
                          (message "prev error")
                          (flymake-goto-prev-error)
                          (flymake-display-err-menu-for-current-line))))

     (unless flymake-display-err-timer
       (setq flymake-display-err-timer
             (run-with-idle-timer flymake-display-err-delay
                                  t
                                  'flymake-display-err-menu-for-current-line)))

     ;; (defvar flymake-display-err-delay 0.5
     ;;  "delay to display flymake error message ")
     ;; (defvar flymake-display-err-timer nil
     ;;  "timer for flymake-display-err-menu-for-current-line")

     ;; (defun flymake-display-err-set-timer ()
     ;;  (unless flymake-display-err-timer
     ;;  (setq flymake-display-err-timer
     ;;        (run-with-idle-timer flymake-display-err-delay
     ;;                          nil
     ;;                          'flymake-display-err-menu-for-current-line))))

     ;; (defun flymake-display-err-cancel-timer ()
     ;;  (when (timerp flymake-display-err-timer)
     ;;  (cancel-timer flymake-display-err-timer)
     ;;  (setq flymake-display-err-timer nil)))

     ))

;; anything.el
(when (require 'anything-config nil t)
  (global-set-key "\M-a" 'anything-c-apropos)
  (global-set-key "\C-xf" 'anything-for-files)
  (global-set-key "\C-xb" 'anything-buffers-list)
  )

;; whitespace-mode
(when (require 'whitespace nil t)
  ;; n 列以上はハイライトで警告
  (setq whitespace-line-column 90)

  (setq whitespace-style
        '(face ;; faceを使って視覚化する。
          ;; 行末の空白
          trailing
          ;; 長すぎる行のうち whitespace-line-column 以降部分
          lines-tail
          ;; タブ
          tabs
          ;; タブの前にあるスペース
          space-before-tab
          ;; タブの後にあるスペース
          space-after-tab
          ))

  (set-face-attribute 'whitespace-tab nil
                      :foreground nil
                      :background "#222222")

  ;; デフォルトで視覚化を有効にする。
  (global-whitespace-mode 1))

;; -------------------------------------------------------------------------
;; メジャーモードの設定や読み込み

;; css-mode
;;(when (autoload-if-exist 'css-mode "css-mode" "Mode for editing CSS files" t)
;;  (add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
;;  (eval-after-load "css-mode"
;;    (let ()
;;      ;; css-mode 読み込まれた時に評価される
;;      )))

;; markdown-mode
(when (autoload-if-exist 'markdown-mode "markdown-mode"
                         "Major mode for editing Markdown files" t)

  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

  (eval-after-load "markdown-mode"
    (let ()
      ;; markdown-mode 読み込まれた時に評価される
      ;;(define-key markdown-mode-map "\C-i" 'indent-for-tab-command)
      ;;(define-key markdown-mode-map "TAB" 'indent-for-tab-command)
      (add-hook 'markdown-mode-hook
                '(lambda ()
                   (set (make-variable-buffer-local 'indent-tabs-mode) t)
                   (set (make-variable-buffer-local 'tab-width) 4)
                   (add-hook (make-variable-buffer-local 'before-save-hook)
                             '(lambda () (tabify (point-min) (point-max))))
                  ))
      )))

;; yaml-mode
(when (autoload-if-exist 'yaml-mode "yaml-mode"
                         "Major mode for editing yaml files" t)

  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (eval-after-load "yaml-mode"
    (let ()
      ;; yaml-mode 読み込まれた時に評価される
      )))

(when '(require 'ruby-mode)
  (add-to-list 'auto-mode-alist '("/Rakefile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec\\'" . ruby-mode))

  ;; flymakeでrubyの構文チェック
  (when (require 'flymake-ruby nil t)
    (add-hook 'ruby-mode-hook 'flymake-ruby-load))
  )

;; nxhtml
(defvar kui-nxhtml-file-name "src/nxhtml/autostart.el")
(when (locate-library kui-nxhtml-file-name)
  (load kui-nxhtml-file-name))

;; js2-mode
(when (autoload-if-exist 'js2-mode "js2"
                         "Major mode for editing javascript files" t)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (eval-after-load "js2"
    (let ()
      ;; js2-mode が読み込まれた時に評価される
      (message ";; loaded js2.el")

      ;; js2-mode 向け flymake
      (when (and (require 'flymake nil t) (executable-find "jslint"))

        (message "Load flymake for js2-mode")

        (defun flymake-js-init ()
          (let* ((temp-file (flymake-init-create-temp-buffer-copy
                             'flymake-create-temp-inplace))
                 (local-file (file-relative-name
                              temp-file
                              (file-name-directory buffer-file-name))))
            (list "jslint" (list local-file))))

        (add-to-list 'flymake-allowed-file-name-masks '("\\.js\\'" flymake-js-init))

        (defun flymake-js-load ()
          (interactive)
          (setq flymake-err-line-patterns
                (cons '("^  Line:\\([0-9]+\\), Pos:\\([0-9]+\\), Reason:\\(.+\\)$"
                        nil 1 2 3)
                      flymake-err-line-patterns))
          (flymake-mode t))

        (add-hook 'js2-mode-hook 'flymake-js-load)
  ))))

;; coffee-mode
(when (autoload-if-exist 'coffee-mode "coffee-mode"
                         "Major mode for editing coffescript files" t)

  (add-to-list 'auto-mode-alist '("\\.coffee\\'" . coffee-mode))
  (add-to-list 'auto-mode-alist '("/Cakefile\\'" . coffee-mode))

  (eval-after-load "coffee"
    (let* ((coffee-command "coffee"))
      ;; coffee-mode が読み込まれた時に評価される
      (message "Load coffee-settings")
      (add-to-list 'ac-modes 'coffee-mode)

      ;; タブ幅
      (setq coffee-tab-width 2)

      ;; flymake
      (when (and (require 'flymake nil t)
                 (require 'flymake-coffeescript nil t)
                 (executable-find flymake-coffeescript-command))
        (add-hook 'coffee-mode-hook 'flymake-coffeescript-load))

      (setq coffee-debug-mode t)

      ;; 独自インデント
      ;; インデントの先頭に移動してからじゃないと、
      ;; insert-tab しない
      (defun kui/coffee-indent-line ()
        "Indent current line as CoffeeScript."
        (interactive)
        (let ((old-point nil)
              (new-point nil))
          (save-excursion
            (set 'old-point (point))
            (back-to-indentation)
            (set 'new-point (point)))

          (if (< old-point new-point)
              (back-to-indentation)
            (coffee-indent-line))
          ))
      (add-hook 'coffee-mode-hook
                '(lambda ()
                   (set (make-local-variable 'indent-line-function)
                        'kui/coffee-indent-line)))
      )))
