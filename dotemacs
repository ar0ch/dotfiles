;;;; -*- mode: lisp-interaction; syntax: elisp; coding: utf-8-unix -*-

;;ライブラリパスを追加
(add-to-list 'load-path "~/.emacs.d")

;; 日本語設定 (UTF-8)
(set-language-environment "Japanese")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

;; リセットされた場合に UTF-8 に戻す
;; http://0xcc.net/blog/archives/000041.html
(set-default-coding-systems 'utf-8)

;; meadow で使うときの日本語周り
; (if (string-equal system-type "windows-nt")	 (let ()  ))

;; emacs 用マジックコメント挿入
(defun kui-insert-magic-comment ()
  (interactive)
  (insert "-*- coding:utf-8 -*-"))

;; emacs 終了時に確認
; (setq confirm-kill-emacs 'yes-or-no-p)

;; マウス操作を有効に
;(xterm-mouse-mode t)
;(mouse-wheel-mode t)

;; フォントロックモード (強調表示等) を有効にする
(global-font-lock-mode t)

;; マークしている範囲をハイライトする
(setq-default transient-mark-mode t)

;; C-x C-u が何もしないように変更する (undo の typo 時誤動作防止)
(global-unset-key "\C-x\C-u")

;; 括弧の対応をハイライト.
(show-paren-mode 1)
(setq show-paren-style 'mixed)

;; 対応するカッコの face
(set-face-attribute 'show-paren-match-face nil
		    :foreground "white"
		    :background "#666666"
		    :bold t)

;; 対応するカッコが無い時の face
(set-face-attribute 'show-paren-mismatch-face nil
		    ;:foreground "white"
		    ;:background "#666666"
		    :bold t)

;; require の代わりに使う
(defun autoload-if-exist (function file &optional docstring interactive type)
  "autoload if FILE exist"
  (if (locate-library file)
      (let () (autoload function file docstring interactive type) t)
    (nil)))

;; バッファ末尾に余計な改行コードを防ぐための設定
(setq next-line-add-newlines nil)

;; 縦分割の時、一行で表示しきれない時の挙動
;;   nil: 改行
;;   t:	  はみ出し？
(setq truncate-partial-width-windows nil)

;; C-x l で goto-line を実行
(define-key ctl-x-map "l" 'goto-line) 

;; インデントの際にタブを用いるか否か
(setq-default indent-tabs-mode nil)

;; 時間を表示
;; (display-time) 

;; メニューバーを消す
(menu-bar-mode 0)

;; "Symbolic link to Git-controlled source file;" みたいに聞かれるの回避
(setq vc-follow-symlinks t)

;; ウィンドウシステムを使っているとき
(if window-system
    (let ()

      (add-to-list 'default-frame-alist
	     '(foreground-color . "white"));; 前景
      ;; (add-to-list 'default-frame-alist
      ;;	     '(border-color . "cyan"));;

      (add-to-list 'default-frame-alist '(cursor-color . "Green"))

      ;; ツールバーを消す
      (tool-bar-mode nil) 

      ;; スクロールバーを消す(nil:消える,right:右側)
      (set-scroll-bar-mode nil)
      ))

;; 列数表示
(column-number-mode 1)

;; C-h でカーソルの左にある文字を消す
(global-set-key "\C-h" 'delete-backward-char)

;; C-h に割り当てられている関数 help-command を C-x C-h に割り当てる
(global-set-key "\C-x\C-h" 'help-command)

;; C-o に動的略語展開機能を割り当てる
;; (define-key global-map "\C-o" 'dabbrev-expand)
;; (setq dabbrev-case-fold-search nil) ; 大文字小文字を区別

;; 日本語・英語混じり文での区切判定
;; http://www.alles.or.jp/~torutk/oojava/meadow/Meadow210Install.html
(defadvice dabbrev-expand
  (around modify-regexp-for-japanese activate compile)
  "Modify `dabbrev-abbrev-char-regexp' dynamically for Japanese words."
  (if (bobp)
      ad-do-it
    (let ((dabbrev-abbrev-char-regexp
	   (let ((c (char-category-set (char-before))))
	     (cond 
	      ((aref c ?a) "[-_A-Za-z0-9]") ; ASCII
	      ((aref c ?j) ; Japanese
	       (cond
		((aref c ?K) "\\cK") ; katakana
		((aref c ?A) "\\cA") ; 2byte alphanumeric
		((aref c ?H) "\\cH") ; hiragana
		((aref c ?C) "\\cC") ; kanji
		(t "\\cj")))
	      ((aref c ?k) "\\ck") ; hankaku-kana
	      ((aref c ?r) "\\cr") ; Japanese roman ?
	      (t dabbrev-abbrev-char-regexp)))))
      ad-do-it)))

;; BS で選択範囲を消す
(delete-selection-mode 1)

;; "The local variables list in .emacs" と言われるのを抑止
(add-to-list 'ignored-local-variables 'syntax) 

;; 基本的な色
(setq default-frame-alist
      (append 
       '(
	 ;; (corsor-type . bar)
	 (corsor-color . "green")
	 (foreground-color . "white")
	 (background-color . "black")
	 )
       default-frame-alist))

;; -------------------------------------------------------------------------

;; css-mode
;;(when (autoload-if-exist 'css-mode "css-mode" "Mode for editing CSS files" t)
;;  (add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
;;  (eval-after-load "css-mode"
;;    (let ()
;;	;; css-mode 読み込まれた時に評価される
;;	)))

;; markdown-mode
(when (autoload-if-exist 'markdown-mode "markdown-mode"
			 "Major mode for editing Markdown files" t)

  (add-to-list 'auto-mode-alist '("\\.markdown" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md" . markdown-mode))

  (eval-after-load "markdown-mode"
    (let ()
      ;; markdown-mode 読み込まれた時に評価される
      ;;(define-key markdown-mode-map "\C-i" 'indent-for-tab-command)
      ;;(define-key markdown-mode-map "TAB" 'indent-for-tab-command)
      (setq indent-tabs-mode t)
      (setq tab-width 4)
      (add-hook 'before-save-hook
		'(lambda () (tabify (point-min) (point-max))))
      )))

;; yaml-mode
(when (autoload-if-exist 'yaml-mode "yaml-mode"
			 "Major mode for editing yaml files" t)

  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

  (eval-after-load "yaml-mode"
    (let ()
      ;; yaml-mode 読み込まれた時に評価される
      )))

;; flymakeでrubyの構文チェック
(when (require 'flymake-ruby nil t)
  (add-hook 'ruby-mode-hook 'flymake-ruby-load)

  ;; エラー行の初めのメッセージを取得する
  (defun flymake-get-first-errline-message ()
    "Get the first message of the first error line."
    (interactive)
    (let* ((first-errline-no
	    (flymake-get-first-err-line-no flymake-err-info))
	   (first-errline-info-list 
	    (flymake-find-err-info flymake-err-info first-errline-no))
	   (first-errline-first-info
	    (nth 0 (nth 0 first-errline-info-list)))
	   (first-errline-first-message 
	    (flymake-ler-text first-errline-first-info))
	   )
      first-errline-first-message
      )))

;; nxhtml
(defvar kui-nxhtml-file-name "src/nxhtml/autostart.el")
(when (locate-library kui-nxhtml-file-name)
  (load kui-nxhtml-file-name)
  (menu-bar-mode 0))

;; js2-mode
(when (autoload-if-exist 'js2-mode "js2"
			 "Major mode for editing javascript files" t)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (eval-after-load "js2"
    (let ()
      ;; js2-mode が読み込まれた時に評価される
      (message ";; loaded js2.el")

      ;; js2-mode 向け flymake 
      (when (and (load "flymake" t) (executable-find "jslint"))

	(message "Load flymake for js2-mode")
	
	(defun flymake-js-init ()
	  (let* ((temp-file (flymake-init-create-temp-buffer-copy
			     'flymake-create-temp-inplace))
		 (local-file (file-relative-name
			      temp-file
			      (file-name-directory buffer-file-name))))
	    (list "jslint" (list local-file))))
	
	(add-to-list 'flymake-allowed-file-name-masks '("\\.js\\'" flymake-js-init))
	
	(defun flymake-js-load ()
	  (interactive)
	  (setq flymake-err-line-patterns
		(cons '("^  Line:\\([0-9]+\\), Pos:\\([0-9]+\\), Reason:\\(.+\\)$"
			nil 1 2 3)
		      flymake-err-line-patterns))
	  (flymake-mode t))
	
	(add-hook 'js2-mode-hook 'flymake-js-load)
  ))))

;; -------------------------------------------------------------------------

;; auto-complete-mode
;; http://cx4a.org/software/auto-complete/index.ja.html
;; (define-key ac-complete-mode-map "\M-/" 'ac-stop)
(when (require 'auto-complete-config nil t)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d.local/ac-dict")
  (ac-config-default)

  ;; *どんなときでも　AC-mode 発動
  ;; (global-auto-complete-mode t)
  
  ;; *候補間を移動 
  ;; (define-key ac-complete-mode-map "\C-n" 'ac-next)
  ;; (define-key ac-complete-mode-map "\C-p" 'ac-previous)
  
  ;; *補完停止
  (define-key ac-complete-mode-map "\C-[" 'ac-stop)
  
  ;; *補完する
  ;; (define-key ac-complete-mode-map "\C-i" 'auto-complete)
  
  ;; *大文字・小文字の区別
  ;; nil:	 区別しない
  ;; t:	 区別する
  ;; 'smart: 補完対象に大文字が含まれる場合のみ区別する
  (setq ac-ignore-case 'smart)
  
  ;; 直ちに補完メニューを表示する
  ;; (ac-show-menu-immediately-on-auto-complete t)
  )

;; tabbar-mode
(when (require 'tabbar nil t)

  ;; タブの間に挟む文字
  (setq tabbar-separator-value ".")

  ;; tabbar のタブのグループの仕方
  ;;   デフォルト: 一部を除き major-mode ごとにタブをグループ化
  ;;   下: 全部同じグループに
  ;;	   (http://www.emacswiki.org/emacs/TabBarMode)
  (setq tabbar-buffer-groups-function (lambda () (list "Buffers")))
  
  (when (require 'cl nil t) ;; remove-if とかに必要

    ;; 表示するタブのフィルタリング
    ;;	 * で始まるバッファはタブに表示しない
    (setq tabbar-buffer-list-function
	  (lambda () 
	    (remove-if 
	     (lambda (b)
	       (and (string-match "^ ?\\*" (buffer-name b))
		    (not (string-equal (buffer-name (current-buffer))
				       (buffer-name b)))))
	     (buffer-list)))))

  ;; faces
  (set-face-attribute 'tabbar-default nil
		      :background "#333333"
		      :foreground "#000000"
		      :underline t
		      :box nil)
  (set-face-attribute 'tabbar-selected nil
		      :background "#000000"
		      :foreground "#ffffff"
		      :underline nil
		      :box nil)
  (set-face-attribute 'tabbar-unselected nil
		      :background "#333333"
		      :foreground "#cccccc"
		      :underline t
		      :box nil)

  ;; 左に表示されるボタンを消す
  (dolist (button '(tabbar-buffer-home-button
		    tabbar-scroll-left-button
		    tabbar-scroll-right-button))
    (set button (cons (cons "" nil) (cons "" nil))))

  ;; Ctrl+Tab でタブ切り替え
  (global-set-key "\M-[1;5i" 'tabbar-forward)  ;; for mintty 
  (global-set-key "\M-[1;6i" 'tabbar-backward) ;; for mintty 
  ;; (global-set-key [(control tab)] 'tabbar-forward)
  ;; (global-set-key [(control shift tab)] 'tabbar-backward)

  (tabbar-mode))
