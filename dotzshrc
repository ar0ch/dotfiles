# -*- mode: sh; coding: utf-8 -*-

[ -f /etc/zsh/zshrc ] && source /etc/zsh/zshrc

# パスの設定
## 重複したパスを登録しない。
typeset -U path
## (N-/): 存在しないディレクトリは登録しない。
##    パス(...): ...という条件にマッチするパスのみ残す。
##	      N: NULL_GLOBオプションを設定。
##		 globがマッチしなかったり存在しないパスを無視する。
##	      -: シンボリックリンク先のパスを評価。
##	      /: ディレクトリのみ残す。
path=($HOME/{.rvm,local}/bin(N-/)
	{,/usr,/usr/local}/bin(N-/)
	/app/{script,mingw/tdm/bin,gs/bin,gs/lib}(N-/)
        $path)

# sudo時のパスの設定
## -x: export SUDO_PATHも一緒に行う。
## -T: SUDO_PATHとsudo_pathを連動する。
typeset -xT SUDO_PATH sudo_path
typeset -U sudo_path
sudo_path=({,/usr/pkg,/usr/local,/usr}/sbin(N-/))

if [ $TERM = "xterm" ] && infocmp xterm-256color > /dev/null 2>&1
then
    export TERM="xterm-256color"
fi

# 表示言語設定
export LANG=ja_JP.UTF-8

# 補完スクリプトのパス
fpath=($HOME/.rvm/scripts/zsh/Completion(N-/) $fpath)

############################################################
## alias, funcction の設定
if which screen > /dev/null 2>&1
then
    alias s="screen"

    if [ "$STY" -a ! "$SCREEN_INIT" ]
    then
	[ $COLUMNS -gt 150 ] && screen -X split -v
	alias s="screen -X focus; screen"
	export SCREEN_INIT=true
    # elif [ ! "$STY" ]
    # then 
    #	  echo "source ~/.screenrc" > ~/.screen.init
    #	  echo "layout new" >> ~/.screen.init
    #	  alias s="screen -c ~/.screen.init"
    fi
fi

if ls --color > /dev/null 2>&1
then
    alias ls="ls -F --color"
elif ls --G > /dev/null 2>&1
then
    alias ls="ls -F -G"
fi

function md(){
    cat <<EOF 
<html><head>
<meta charset="UTF-8" />
<style>
  h1,h2,h3,h4,h5,h6 {font-family: "Hiragino Kaku Gothic Pro W3", "ヒラギノ角ゴ Pro W3", Meiryo, "メイリオ", "MS P Gothic", "ＭＳ Ｐゴシック", sans-serif}
  p, li {font-family:Georgia, Times, "Times New Roman", serif}
</style>
</head><body>
EOF
    markdown "$1"
    echo '</body></html>'
}

function markdown_preview(){
    if [ $# -ne 1 ]; then
	echo "error: invalid arguments"
	echo "usage: $0 markdown_file"
	return 1;
    fi

    if [ ! -f "$1" ]; then
	echo "error: $1 dose not exists"
	return 1;
    fi

    md "$1" | w3m -T text/html -dump

    # 縦割りしたときにズレる問題解決
    if [ $STY ]
    then
	sleep 0.2
	screen -X redisplay
    fi
}

function j(){
    class=`echo $1 | sed -e "s/\\.java$//"`
    shift
    echo $@
    if [ -f build.xml ]; then
	ant && java -DDebug=on $class $@
    else
	javac $class.java && java -DDebug=on $do_java $@
    fi
}

## refe の文字コードをUTF-8に修正
function refe(){
    refe "$@" | nkf -Ew
}

## ぐぐる
function g(){
    w3m "google.com/search?q=$@"
}

## emacs の設定
if [ $STY ]
then
    export EMACS_SERVER_NAME="server-$STY"

    alias e="emacsclient -n -s $EMACS_SERVER_NAME"
    alias emacsclient="emacsclient -n -s $EMACS_SERVER_NAME"
    alias eview="emacs -f view-mode"

    if ! emacsclient -s "$EMACS_SERVER_NAME" -e "server-name" > /dev/null 2>&1
    then
	s emacs --eval "(let () (setq server-name \"$EMACS_SERVER_NAME\") (server-start) (setq confirm-kill-emacs 'yes-or-no-p))"
	# screen -X "resize -h 85"
	screen -X focus
    fi
fi

## 256色生成用便利関数
### red: 0-5
### green: 0-5
### blue: 0-5
color256()
{
    local red=$1; shift
    local green=$2; shift
    local blue=$3; shift

    echo -n $[$red * 36 + $green * 6 + $blue + 16]
}

fg256()
{
    echo -n $'\e[38;5;'$(color256 "$@")"m"
}

bg256()
{
    echo -n $'\e[48;5;'$(color256 "$@")"m"
}

#########################################################################
# 変数セット

# PROMPT のための色一覧
local Black=$'%{\e[0;30m%}'
local DarkGray=$'%{\e[1;30m%}'
local Blue=$'%{\e[0;34m%}'
local LightBlue=$'%{\e[1;34m%}'
local Green=$'%{\e[0;32m%}'
local LightGreen=$'%{\e[1;32m%}'
local Cyan=$'%{\e[0;36m%}'
local LightCyan=$'%{\e[1;36m%}'
local Red=$'%{\e[0;31m%}'
local LightRed=$'%{\e[1;31m%}'
local Purple=$'%{\e[0;35m%}'
local LightPurple=$'%{\e[1;35m%}'
local Brown=$'%{\e[0;33m%}'
local Yellow=$'%{\e[1;33m%}'
local LightGray=$'%{\e[0;37m%}'
local White=$'%{\e[1;37m%}'
local Default=$'%{\e[1;39m%}'

ColorList=($Purple $Green $Blue $Cyan $Red)
local PromptUserColor=$ColorList[$((($RANDOM % ${#ColorList})+1))]
local PromptHostColor=$ColorList[$((($RANDOM % ${#ColorList})+1))]
# ランダムに色を設定するプロンプト(user, host 別の色)
# PROMPT=$'\n'$PromptUserColor'${USER}'$Default'@'$PromptHostColor'${HOST} '$Default'%~ '$'\n'$Default'%(!.#.$) '
# ランダムに色を設定するプロンプト(user, host 同じ色)
PROMPT=$'\n'$PromptUserColor'${USER}@${HOST} '$Yellow'%~ '$'\n'$Default'%(!.#.$) '


################################################################################
##    プロンプト を生成
colors=(
    # $'%{\e[0;30m%}' # black
    $'%{\e[0;31m%}' # red
    $'%{\e[0;32m%}' # green
    $'%{\e[0;33m%}' # brown
    $'%{\e[0;34m%}' # blue
    $'%{\e[0;35m%}' # purple
    $'%{\e[0;36m%}' # cyan
    # $'%{\e[0;37m%}' # gray
    
    # light colors
    # $'%{\e[1;30m%}' # black
    $'%{\e[1;31m%}' # red
    $'%{\e[1;32m%}' # green
    $'%{\e[1;33m%}' # brown
    $'%{\e[1;34m%}' # blue
    $'%{\e[1;35m%}' # purple
    $'%{\e[1;36m%}' # cyan
    # $'%{\e[1;37m%}' # gray
)

export USER_COLOR=$colors[$((`echo "$USER" | sum | cut -f1 -d' '`%${#colors}))+1]
export HOST_COLOR=$colors[$((`echo "$HOST" | sum | cut -f1 -d' '`%${#colors}))+1]
update_prompt(){
    local datetime="`date +'%Y/%m/%d %H:%M:%S'`"
    local escaped_home="`echo ${HOME}|sed -e 's/\//\\\\\//g'`"
    local current_path="`pwd|sed -e \"s/^${escaped_home}/~/\"`"

    local left="$USER_COLOR$USER"$'%{\e[1;39m%}'"@$HOST_COLOR$HOST"$'%{\e[1;39m%}'":"$'%{\e[1;33m%}'"${current_path} "
    local right=" ${datetime} "
    local num_bar=`print -n -P -- "$left$right" | sed -e $'s/\e\[[0-9;]*m//g' | wc -m`
    local num_bar=$((${COLUMNS}-${num_bar}))

    if [ $num_bar -lt 0 ]
    then
	local datetime="`date +'%H:%M:%S'`"
	local right=" ${datetime} "
	local num_bar=`print -n -P -- "$left$right" | sed -e $'s/\e\[[0-9;]*m//g' | wc -m | sed -e 's/ //g'`
	local num_bar=$((${COLUMNS}-${num_bar}))
	if [ $num_bar -lt 0 ]
	then
	    local right=''
	    local num_bar=`print -n -P -- "$left$right" | sed -e $'s/\e\[[0-9;]*m//g' | wc -m`
	    local num_bar=$((${COLUMNS}-${num_bar}))
	fi
    fi

    local sep="-"
    local bar=""
    local i=0
    while [ $num_bar -gt $((${#bar}+${#sep})) ]
    do
	local bar="$sep$bar"
	local i=$((i+1))
	# [ 0 -eq $((i%10)) ] && local bar="-$bar"
    done
    while [ $num_bar -gt ${#bar} ]
    do
	local bar=" $bar"
    done
    PROMPT=$'\n'"${left}"$'%{\e[0;37m%}'"${bar}${right}"$'\n'"${Default}\$ "
}
precmd_functions=($precmd_functions update_prompt)

############################################################
##  zsh プロパティ

HISTFILE=$HOME/.zsh-history
HISTSIZE=100000
SAVEHIST=100000

## 補完機能の強化
autoload -U compinit
compinit

## コアダンプサイズを制限
limit coredumpsize 102400

## 出力の文字列末尾に改行コードが無い場合でも表示
unsetopt promptcr

## 色を使う
setopt prompt_subst

## ビープを鳴らさない
setopt nobeep

## 内部コマンド jobs の出力をデフォルトで jobs -l にする
setopt long_list_jobs

## 補完候補一覧でファイルの種別をマーク表示
setopt list_types

## サスペンド中のプロセスと同じコマンド名を実行した場合はリジューム
setopt auto_resume

## 補完候補を一覧表示
setopt auto_list

## 直前と同じコマンドをヒストリに追加しない
setopt hist_ignore_dups

## cd 時に自動で push
setopt autopushd

## 同じディレクトリを pushd しない
setopt pushd_ignore_dups

## ファイル名で #, ~, ^ の 3 文字を正規表現として扱う
setopt extended_glob

## TAB で順に補完候補を切り替える
setopt auto_menu

## zsh の開始, 終了時刻をヒストリファイルに書き込む
setopt extended_history

## =command を command のパス名に展開する
setopt equals

## --prefix=/usr などの = 以降も補完
setopt magic_equal_subst

## ヒストリを呼び出してから実行する間に一旦編集
setopt hist_verify

# ファイル名の展開で辞書順ではなく数値的にソート
setopt numeric_glob_sort

## 出力時8ビットを通す
setopt print_eight_bit

## ヒストリを共有
setopt share_history

## 補完候補のカーソル選択を有効に
zstyle ':completion:*:default' menu select=1

## 補完候補の色づけ
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

## ディレクトリ名だけで cd
setopt auto_cd

## カッコの対応などを自動的に補完
setopt auto_param_keys

## ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt auto_param_slash

## スペルチェック
setopt correct

## sudo時にはsudo用のパスも使う。
zstyle ':completion:sudo:*' environ PATH="$SUDO_PATH:$PATH"

## 特定のコマンドの補完を無効化
# compdef -d java

## mintty の ANSI Colors の設定
COLOR_SCHEME="$HOME/.zshrc.d/color_schemes/my_colors"
[ -f "$COLOR_SCHEME" ] && source "$COLOR_SCHEME"

## マシンごとの設定
! [ -f ~/.zshrc.local ] && touch ~/.zshrc.local
source ~/.zshrc.local

